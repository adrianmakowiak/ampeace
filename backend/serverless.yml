service: ampeace-backend

provider:
  name: aws
  runtime: python3.8
  stage: dev
  region: eu-central-1
  memorySize: 128
  timeout: 6
  apiGateway:
    binaryMediaTypes:
      - '*/*'

plugins:
  - serverless-iam-roles-per-function
  - serverless-cloudformation-sub-variables
  - serverless-python-requirements

custom:
  pythonRequirements:
    noDeploy:
      - boto3
      - botocore
    dockerizePip: false # change to true in case of using python packages that require binaries

functions:
  soundsList:
    handler: src/lambdas/sound.list
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Query
          - dynamodb:GetItem	
          - dynamodb:DescribeTable    
        Resource: !GetAtt soundTable.Arn 
    events:
      - http:
          path: sounds
          cors: true
          method: get
  soundsGet:
    handler: src/lambdas/sound.get
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:GetObject
          - s3:ListBucket    
        Resource: 
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket
              - '/*'
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket
    events:
      - http:
          path: sounds/{id}
          method: get
          cors: true
  soundsPreUpload:
    handler: src/lambdas/sound.pre_upload
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:GetObject
          - s3:ListBucket  
          - s3:PutObject  
        Resource: 
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket
              - '/*'
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket
    events:
      - http:
          path: sounds/upload-url
          method: get
          cors: true
  soundsPost:
    handler: src/lambdas/sound.post
    iamRoleStatements:
      - Effect: "Allow"        
        Action:
          - s3:PutObject        
        Resource: 
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket
              - '/*'     
          - Fn::Join: 
            - ''
            - - 'arn:aws:s3:::'
              - Ref: soundBucket   
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem    
          - dynamodb:DescribeTable    
        Resource: !GetAtt soundTable.Arn  
    events:
      - http:
          path: sounds
          method: post
          cors: true
          request:
            parameters:
              querystrings:
                name: true

resources:
  Resources:
    soundBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ampeace-sounds
    soundTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-ampeace-sound-table
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
        BillingMode: PAY_PER_REQUEST